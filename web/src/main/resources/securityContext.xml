<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (C) 2016 Inera AB (http://www.inera.se)
  ~
  ~ This file is part of sklintyg (https://github.com/sklintyg).
  ~
  ~ sklintyg is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ sklintyg is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
              http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Enable auto-wiring -->
    <context:annotation-config/>
    <context:component-scan base-package="org.springframework.security.saml"/>

    <!-- Unsecured pages -->
    <security:http security="none" pattern="/libs/**"/>

    <security:http security="none" pattern="/api/config/**"/>
    <security:http security="none" pattern="/api/user/prestored"/>
    <!-- <security:http security="none" pattern="/api/user/**"/> -->

    <!-- Everything under /app such as js, css, images etc is ok to access at any time -->
    <security:http security="none" pattern="/app/**"/>
    <security:http security="none" pattern="/css/**"/>
    <security:http security="none" pattern="/img/**"/>
    <security:http security="none" pattern="/js/**"/>
    <security:http security="none" pattern="/fonts/**"/>

    <security:http security="none" pattern="/"/>
    <security:http security="none" pattern="/error.jsp"/>
    <security:http security="none" pattern="/index.html"/>
    <security:http security="none" pattern="/saml/web/**"/>
    <security:http security="none" pattern="/saml2/web/**"/>
    <security:http security="none" pattern="/services/**"/>
    <security:http security="none" pattern="/monitoring/**"/>

    <security:http security="none" pattern="/favicon.ico"/>

    <!-- Logger for SAML messages and events -->
    <bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger">
        <property name="logMessages" value="true"/>
        <property name="logErrors" value="true"/>
    </bean>

    <!-- Real logins should use the unified user details service facade -->
    <bean id="sampleUserDetailsService" class="se.inera.intyg.authsampleapp.auth.SampleUserDetailsService"/>

    <!-- Initialization of OpenSAML library-->
    <bean class="org.springframework.security.saml.SAMLBootstrap"/>

    <!-- Initialization of the velocity engine -->
    <bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory"
          factory-method="getEngine"/>

    <!-- XML parser pool needed for OpenSAML parsing -->
    <bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool" scope="singleton"
          init-method="initialize"/>
    <bean id="parserPoolHolder" class="org.springframework.security.saml.parser.ParserPoolHolder" scope="singleton"/>

    <bean id="failureHandler"
          class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
        <property name="exceptionMappings">
            <props>

                <prop key="org.springframework.security.authentication.BadCredentialsException">
                    /error.jsp?reason=login.failed
                </prop>

            </props>
        </property>
        <property name="defaultFailureUrl" value="/error.jsp?reason=login.failed"/>
    </bean>

    <bean id="accessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
        <property name="errorPage" value="/error.jsp?reason=denied"/>
    </bean>

    <bean id="http403ForbiddenEntryPoint"
          class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"/>

    <!-- SessionRegistry is needed for keeping track of authenticated sessions (i.e users), this impl performs audit logging of login and logouts. -->
    <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"/>

    <!-- Session authentication strategy that registers authenticated sessions with the session registry -->
    <bean id="registerSessionAuthenticationStrategy"
          class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
        <constructor-arg ref="sessionRegistry"/>
    </bean>


    <!-- ======================================================================== -->
    <!-- The wc-security-test profile support both Säkerhetstjänst and Fake login -->
    <!-- ======================================================================== -->
    <beans profile="dev">
        <!-- /visa/intyg/ and /webcert/web are deep-integration links used by VAS and Cosmic and should use SAML SSO -->
        <security:http request-matcher="regex"
                       pattern="(\/fake)|(\/welcome.html)|(\/logout)|(\/saml\/.*)|(\/visa\/intyg\/.*)|(\/webcert\/web\/.*)|(\/web\/maillink\/.*)"
                       entry-point-ref="samlEntryPoint">
            <security:csrf disabled="true"/>
            <security:logout logout-url="/logout" logout-success-url="/index.html" invalidate-session="true"/>
            <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
            <security:session-management session-authentication-strategy-ref="registerSessionAuthenticationStrategy"/>
        </security:http>

        <security:http use-expressions="false" entry-point-ref="http403ForbiddenEntryPoint">
            <security:csrf disabled="true"/>
            <security:logout logout-url="/logout" logout-success-url="/index.html" invalidate-session="true"/>
            <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
            <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
            <security:session-management session-authentication-strategy-ref="registerSessionAuthenticationStrategy"/>
        </security:http>

        <security:authentication-manager alias="authenticationManager">
            <security:authentication-provider ref="samlAuthenticationProvider"/>
        </security:authentication-manager>
    </beans>

    <beans profile="dev">

        <bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
            <security:filter-chain-map request-matcher="ant">
                <security:filter-chain pattern="/saml/login/**" filters="samlEntryPoint"/>
                <security:filter-chain pattern="/saml/logout/**" filters="samlLogoutFilter"/>
                <security:filter-chain pattern="/saml/SSO/**" filters="samlWebSSOProcessingFilter"/>
                <security:filter-chain pattern="/saml/SingleLogout/**" filters="samlLogoutProcessingFilter"/>
            </security:filter-chain-map>
        </bean>

        <bean id="saveRequestMatcher" class="org.springframework.security.web.util.matcher.RegexRequestMatcher">
            <constructor-arg index="0" value="\/maillink\/.*"/>
            <constructor-arg index="1">
                <null/>
            </constructor-arg>
        </bean>
        <bean id="httpSessionRequestCache"
              class="org.springframework.security.web.savedrequest.HttpSessionRequestCache">
            <property name="requestMatcher" ref="saveRequestMatcher"/>
        </bean>

        <!-- Handler deciding where to redirect user after successful login -->
        <bean id="successRedirectHandler"
              class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
            <property name="defaultTargetUrl" value="/#/app"/>
            <property name="alwaysUseDefaultTargetUrl" value="true"/>
            <property name="requestCache" ref="httpSessionRequestCache"/>
        </bean>

        <!-- Central storage of cryptographic keys -->
        <bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
            <constructor-arg value="${sakerhetstjanst.saml.keystore.file}"/>
            <constructor-arg type="java.lang.String" value="${sakerhetstjanst.saml.keystore.password}"/>
            <constructor-arg>
                <map>
                    <entry key="${sakerhetstjanst.saml.keystore.alias}"
                           value="${sakerhetstjanst.saml.keystore.password}"/>
                </map>
            </constructor-arg>
            <constructor-arg type="java.lang.String" value="${sakerhetstjanst.saml.keystore.alias}"/>
        </bean>

        <!-- Entry point to initialize authentication, default values taken from properties file -->
        <bean id="samlEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint">
            <property name="defaultProfileOptions">
                <bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
                    <property name="includeScoping" value="false"/>
                </bean>
            </property>
        </bean>

        <!-- IDP Metadata configuration - paths to metadata of IDPs in circle of trust is here -->
        <bean id="metadata" class="org.springframework.security.saml.metadata.CachingMetadataManager">

            <constructor-arg>
                <list>

                    <!-- START SERVICE PROVIDER BEAN FOR INERA TEST IDP 1.0 -->
                    <bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
                        <constructor-arg>
                            <bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
                                <constructor-arg>
                                    <value type="java.io.File">${sakerhetstjanst.saml.sp.metadata.file}</value>
                                </constructor-arg>
                                <property name="parserPool" ref="parserPool"/>
                            </bean>
                        </constructor-arg>
                        <property name="metadataTrustCheck" value="true"/>

                        <constructor-arg>
                            <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
                                <property name="alias" value="defaultAlias"/>
                                <property name="local" value="true"/>
                                <property name="securityProfile" value="metaiop"/>
                                <property name="sslSecurityProfile" value="metaiop"/>
                                <property name="signMetadata" value="true"/>
                                <!-- The signingKey and encryptionKey refers to the _aliases_ of the key in the keystore defined in the keyManager bean -->
                                <property name="signingKey" value="${sakerhetstjanst.saml.keystore.alias}"/>
                                <property name="encryptionKey" value="${sakerhetstjanst.saml.keystore.alias}"/>
                                <property name="requireArtifactResolveSigned" value="true"/>
                                <property name="requireLogoutRequestSigned" value="false"/>
                                <property name="requireLogoutResponseSigned" value="false"/>
                            </bean>
                        </constructor-arg>
                    </bean>
                    <!--  END SERVICE PROVIDER BEAN FOR SITHS -->

                    <!-- START IDENTITY PROVIDER BEAN FOR SITHS -->
                    <bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
                        <constructor-arg>
                            <bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
                                <constructor-arg>
                                    <value type="java.io.File">${sakerhetstjanst.saml.idp.metadata.file}</value>
                                </constructor-arg>
                                <property name="parserPool" ref="parserPool"/>
                            </bean>
                        </constructor-arg>
                        <constructor-arg>
                            <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
                                <property name="alias" value="defaultAlias"/>
                            </bean>
                        </constructor-arg>

                        <property name="metadataTrustCheck" value="false"/>
                    </bean>
                </list>
            </constructor-arg>
            <property name="refreshCheckInterval" value="86400000"/>

            <property name="defaultIDP" value="${sakerhetstjanst.saml.idp.entityid}"/>
            <property name="hostedSPName" value="${sakerhetstjanst.saml.sp.entityid}"/>

        </bean>

        <!-- SAML Authentication Provider responsible for validating of received SAML messages over SITHS or e-leg class="org.springframework.security.saml.SAMLAuthenticationProvider"-->
        <bean id="samlAuthenticationProvider"
              class="se.inera.intyg.authsampleapp.auth.SampleSAMLAuthenticationProvider">
            <property name="userDetails" ref="sampleUserDetailsService"/>
            <property name="forcePrincipalAsString" value="false"/>
        </bean>

        <!-- Processing filter for WebSSO profile messages -->
        <bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
            <property name="authenticationManager" ref="authenticationManager"/>
            <property name="sessionAuthenticationStrategy" ref="registerSessionAuthenticationStrategy"/>
            <property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
            <property name="authenticationFailureHandler" ref="failureHandler"/>
        </bean>

        <!-- Class loading incoming SAML messages from httpRequest stream -->
        <bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
            <constructor-arg>
                <list>
                    <ref bean="redirectBinding"/>
                    <ref bean="postBinding"/>
                    <ref bean="artifactBinding"/>
                </list>
            </constructor-arg>
        </bean>

        <bean id="artifactBinding" class="org.springframework.security.saml.processor.HTTPArtifactBinding">
            <constructor-arg ref="parserPool"/>
            <constructor-arg ref="velocityEngine"/>
            <constructor-arg>
                <bean class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
                    <constructor-arg>
                        <bean class="org.apache.commons.httpclient.HttpClient"/>
                    </constructor-arg>
                    <property name="processor">
                        <bean id="soapProcessor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
                            <constructor-arg ref="soapBinding"/>
                        </bean>
                    </property>
                </bean>
            </constructor-arg>
        </bean>

        <bean id="soapBinding" class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
            <constructor-arg ref="parserPool"/>
        </bean>

        <!-- SAML 2.0 WebSSO Assertion Consumer -->
        <bean id="webSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl">
            <property name="responseSkew" value="${sakerhetstjanst.saml.responseSkew}"/>
        </bean>

        <!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->
        <bean id="hokWebSSOprofileConsumer"
              class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>

        <!-- SAML 2.0 Web SSO profile -->
        <bean id="webSSOprofile" class="se.inera.intyg.authsampleapp.auth.SampleWebSSOProfileImpl">
        </bean>

        <!-- SAML 2.0 Logout Profile -->
        <bean id="logoutprofile" class="org.springframework.security.saml.websso.SingleLogoutProfileImpl"/>

        <!-- Bindings, encoders and decoders used for creating and parsing messages -->
        <bean id="postBinding" class="org.springframework.security.saml.processor.HTTPPostBinding">
            <constructor-arg ref="parserPool"/>
            <constructor-arg ref="velocityEngine"/>
        </bean>

        <bean id="redirectBinding" class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
            <constructor-arg ref="parserPool"/>
        </bean>

        <!-- Provider of default SAML Context -->
        <bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderImpl">
            <property name="keyManager" ref="keyManager"/>
        </bean>

        <!-- Logout handler terminating local session -->
        <bean id="logoutHandler"
              class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>

        <!-- Override default logout processing filter with the one processing SAML messages -->
        <bean id="samlLogoutFilter" class="org.springframework.security.saml.SAMLLogoutFilter">
            <constructor-arg index="0" ref="successLogoutHandler"/>
            <constructor-arg index="1" ref="logoutHandler"/>
            <constructor-arg index="2" ref="logoutHandler"/>
        </bean>

        <!-- Filter processing incoming logout messages -->
        <!-- First argument determines URL user will be redirected to after successful global logout -->
        <bean id="samlLogoutProcessingFilter" class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
            <constructor-arg index="0" ref="successLogoutHandler"/>
            <constructor-arg index="1" ref="logoutHandler"/>
        </bean>

        <!-- Handler for successful logout -->
        <bean id="successLogoutHandler"
              class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
            <property name="defaultTargetUrl" value="/error.jsp?reason=logout"/>
        </bean>

    </beans>

</beans>
